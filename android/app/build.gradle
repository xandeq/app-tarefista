apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

// Definição do jscFlavor
def jscFlavor = 'org.webkit:android-jsc:+'

// Definição do ProGuard
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 34
    // ndkVersion "26.1.10909125"
    // buildToolsVersion rootProject.ext.buildToolsVersion
    namespace 'com.xandeq.Tarefista'

    defaultConfig {
        applicationId 'com.xandeq.Tarefista'
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 14
        versionName "1.1.4"
    }
    // Adicionando suporte ao CMake
    // externalNativeBuild {
    //     cmake {
    //         path "CMakeLists.txt"  // Certifique-se de que o caminho correto esteja configurado
    //         version "3.10.2"       // Mudar para a versão CMake que você está utilizando, por exemplo 3.10.2 ou 3.22.1
    //     }
    // }
    signingConfigs {
         release {
            keyAlias 'key0'
            keyPassword 'Alexandre10#'
            storeFile file('C:/Users/acq20/Desktop/Projetos/tarefista/app/android/release-key.keystore') // Caminho do arquivo keystore
            storePassword 'Alexandre10#'
        }

        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        // Desativar a verificação de permissões de notificação
        disable 'NotificationPermission'
        // Se quiser ignorar todos os erros e warnings, use esta linha:
        abortOnError false
        // Pode adicionar mais verificações a serem desativadas aqui, como:
        // disable 'MissingPermission', 'UnusedResources'
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging false
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

    if (isGifEnabled) {
        // For animated gif support
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        // For webp support
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            // Animated webp support
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    // Verifica se o Hermes está habilitado
    if (project.ext.react.enableHermes) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor // Usa o jscFlavor definido anteriormente
    }
}

react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"
}

apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
